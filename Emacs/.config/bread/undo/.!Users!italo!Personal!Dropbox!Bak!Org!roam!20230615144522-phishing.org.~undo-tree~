(undo-tree-save-format-version . 1)
"b12916bf71f2b56c42a9ab9b8120a0e3b193c760"
[nil nil nil nil (25838 5813 175708 0) 0 nil]
([nil nil ((256 . 270) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -256) (undo-tree-id27 . -1) (#("h" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -257) (undo-tree-id28 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -258) (undo-tree-id29 . -1) 259 (256 . 259) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -256) (undo-tree-id30 . -1) (#("s" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -257) (undo-tree-id31 . -1) (#("i" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -258) (undo-tree-id32 . -1) (#("n" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -259) (undo-tree-id33 . -1) 260 (254 . 260) (253 . 254) (t 25739 6510 20095 688000) 131) nil (25838 5813 175707 0) 0 nil])
([nil nil ((#("Phishing is the use of digital communications to trick people into revealing sensitive data or deploying malicious software.
" 0 124 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 124 125 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 129) (undo-tree-id0 . -15) (undo-tree-id1 . -15) (undo-tree-id2 . -15) (undo-tree-id3 . -15) (undo-tree-id4 . -15) (undo-tree-id5 . -15) (undo-tree-id6 . -15) (undo-tree-id7 . -15) (undo-tree-id8 . -15) (undo-tree-id9 . -15) (undo-tree-id10 . -15) (undo-tree-id11 . -15) (undo-tree-id12 . -15) (undo-tree-id13 . -15) (undo-tree-id14 . -15) (undo-tree-id15 . -15) (undo-tree-id16 . -15) (undo-tree-id17 . -15) (undo-tree-id18 . -15) (undo-tree-id19 . -15) (undo-tree-id20 . -15) (undo-tree-id21 . -15) (undo-tree-id22 . -15) (undo-tree-id23 . -15) (undo-tree-id24 . -15) (undo-tree-id25 . -125) (undo-tree-id26 . -124) 144) nil (25838 5813 175698 0) 0 nil])
([nil nil ((145 . 146) (t 25838 5813 179436 294000) 144) nil (25838 5822 508030 0) 0 nil])
([nil nil ((nil rear-nonsticky nil 394 . 395) (nil fontified nil 146 . 395) (146 . 395)) nil (25838 5822 508029 0) 0 nil])
([nil nil ((#("Phishing is the 
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 16 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 16 17 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 129) (undo-tree-id34 . -15) (undo-tree-id35 . -16) (undo-tree-id36 . -17) (undo-tree-id37 . -17) (undo-tree-id38 . -15) (undo-tree-id39 . -15) (undo-tree-id40 . -15) (undo-tree-id41 . -15) (undo-tree-id42 . -15) (undo-tree-id43 . -15) (undo-tree-id44 . -15) (undo-tree-id45 . -15) (undo-tree-id46 . -15) (undo-tree-id47 . -15) (undo-tree-id48 . -15) (undo-tree-id49 . -15) (undo-tree-id50 . -15) (undo-tree-id51 . -15) (undo-tree-id52 . -15) (undo-tree-id53 . -15) (undo-tree-id54 . -15) (undo-tree-id55 . -15) (undo-tree-id56 . -15) (undo-tree-id57 . -15) (undo-tree-id58 . -15) (undo-tree-id59 . -15) (undo-tree-id60 . -15) (undo-tree-id61 . -15) (undo-tree-id62 . -17) 144) nil (25838 5827 370254 0) 0 nil])
([nil nil ((apply yas--snippet-revive 129 155 #s(yas--snippet nil nil #s(yas--exit 143 nil) 0 nil nil nil nil)) (apply yas--take-care-of-redo #s(yas--snippet nil nil #s(yas--exit 143 nil) 0 nil nil nil nil)) (129 . 155) (#("<q" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 129) (undo-tree-id127 . -2) (undo-tree-id128 . -1) (undo-tree-id129 . -1) (undo-tree-id130 . -1) (undo-tree-id131 . -1) (undo-tree-id132 . -1) (undo-tree-id133 . -1) (undo-tree-id134 . -1) (undo-tree-id135 . -1) (undo-tree-id136 . -1) (undo-tree-id137 . -1) (undo-tree-id138 . -1) (undo-tree-id139 . -1) (undo-tree-id140 . -1) (undo-tree-id141 . -1) (undo-tree-id142 . -1) (undo-tree-id143 . -2) (undo-tree-id144 . -2) (undo-tree-id145 . -2) (undo-tree-id146 . -2) (undo-tree-id147 . -2) (undo-tree-id148 . -2) (undo-tree-id149 . -2) (undo-tree-id150 . -2) (undo-tree-id151 . -2) (undo-tree-id152 . -2) (undo-tree-id153 . -2) (undo-tree-id154 . -2) (undo-tree-id155 . -2) (undo-tree-id156 . -2) (undo-tree-id157 . -2) (undo-tree-id158 . -2) 131 (129 . 131) (129 . 130) 139 (t 25838 5822 512608 702000)) nil (25838 5831 530175 0) 0 nil] [nil nil ((129 . 152) (#("<s" 0 2 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -129) (undo-tree-id63 . -2) 131 (129 . 131) (#("q" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -129) (undo-tree-id64 . -1) (undo-tree-id65 . -1) (#("u" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -130) (undo-tree-id66 . -1) (undo-tree-id67 . -1) (#("o" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -131) (undo-tree-id68 . -1) (undo-tree-id69 . -1) (#("t" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -132) (undo-tree-id70 . -1) (undo-tree-id71 . -1) (#("e" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -133) (undo-tree-id72 . -1) (undo-tree-id73 . -1) (undo-tree-id74 . -1) (undo-tree-id75 . -1) 134 (129 . 134) (129 . 130) 139 (t 25838 5822 512608 702000)) ((#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) face org-block-end-line)) . 129) (undo-tree-id76 . 1) (#("quote" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 1 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 2 3 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 3 4 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent))) 4 5 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 129) (undo-tree-id77 . -5) (undo-tree-id78 . -5) (129 . 134) (#("<s" 0 2 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 129) (undo-tree-id79 . -2) (129 . 131) (#("#+begin_src 

#+end_src" 0 12 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 12 13 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-begin-line) 13 14 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face (:inherit (org-block))) 14 23 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) font-lock-fontified t font-lock-multiline t face org-block-end-line)) . 129) (undo-tree-id80 . -11) (undo-tree-id81 . 11) (undo-tree-id82 . -12) (undo-tree-id83 . -23) (undo-tree-id84 . -11)) (25838 5827 369085 0) 0 nil])
([nil nil ((#("Phishing (pronounced “fishing”) is a type of social engineering in which an attacker attempts to obtain sensitive information from users by masquerading as a trusted entity in an e-mail or instant message sent to a large group of often random users.
" 0 1 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 1 248 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t) 248 249 (line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) fontified t rear-nonsticky t) 249 250 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . 156) (undo-tree-id102 . -249) (undo-tree-id103 . -10) (undo-tree-id104 . -10) (undo-tree-id105 . -10) (undo-tree-id106 . -10) (undo-tree-id107 . -10) (undo-tree-id108 . -10) (undo-tree-id109 . -10) (undo-tree-id110 . -10) (undo-tree-id111 . -10) (undo-tree-id112 . -10) (undo-tree-id113 . -10) (undo-tree-id114 . -10) (undo-tree-id115 . -10) (undo-tree-id116 . -10) (undo-tree-id117 . -10) (undo-tree-id118 . -10) (undo-tree-id119 . -10) (undo-tree-id120 . -10) (undo-tree-id121 . -10) (undo-tree-id122 . -10) (undo-tree-id123 . -10) (undo-tree-id124 . -10) (undo-tree-id125 . -10) (undo-tree-id126 . -250)) nil (25838 5831 530146 0) 0 nil])
nil
([nil nil ((nil rear-nonsticky nil 143 . 144) (#("
" 0 1 (fontified nil line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)))) . -393) (143 . 394)) nil (25838 5831 530125 0) 0 nil])
([nil nil ((#("
" 0 1 (fontified t line-prefix #("  " 0 2 (face org-indent)) wrap-prefix #("  " 0 2 (face org-indent)) rear-nonsticky t font-lock-fontified t font-lock-multiline t)) . 143) (undo-tree-id85 . -1) (undo-tree-id86 . -1) (undo-tree-id87 . -1) (undo-tree-id88 . -1) (undo-tree-id89 . -1) (undo-tree-id90 . -1) (undo-tree-id91 . -1) (undo-tree-id92 . -1) (undo-tree-id93 . -1) (undo-tree-id94 . -1) (undo-tree-id95 . -1) (undo-tree-id96 . -1) (undo-tree-id97 . -1) (undo-tree-id98 . -1) (undo-tree-id99 . -1) (undo-tree-id100 . -1) (undo-tree-id101 . -1)) nil (25838 5833 479745 0) 0 nil])
([nil current ((404 . 405) 393) nil (25838 5834 449515 0) 0 nil] [nil nil ((416 . 417) (t 25838 5831 536165 759000) 405) ((#("
" 0 1 (fontified t line-prefix #("*" 0 1 (face org-indent)) wrap-prefix #("*** " 0 1 (face org-indent) 1 4 (face org-indent)))) . 416) (undo-tree-id159 . -1) (undo-tree-id160 . -1) (undo-tree-id161 . -1) (undo-tree-id162 . -1) (undo-tree-id163 . -1) (undo-tree-id164 . -1) (undo-tree-id165 . -1) (undo-tree-id166 . -1) (undo-tree-id167 . -1) (undo-tree-id168 . -1) (undo-tree-id169 . -1) (undo-tree-id170 . -1) (undo-tree-id171 . -1) (undo-tree-id172 . -1) (undo-tree-id173 . -1) (undo-tree-id174 . -1) (undo-tree-id175 . -1) (undo-tree-id176 . -1) (t 25838 5833 403739 146000)) (25838 5833 397779 0) 0 nil])
nil
nil
