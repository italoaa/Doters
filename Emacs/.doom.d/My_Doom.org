#+TITLE: My_doom
#+description: This is a org file to store all my doom configuration neatly and organized
#+startup: fold
#+auto_tangle: t

* Table of Contents :TOC_2:
- [[#init][Init]]
  - [[#completion][Completion]]
  - [[#ui][UI]]
  - [[#editor][Editor]]
  - [[#emacs][Emacs]]
  - [[#term][Term]]
  - [[#checkers][Checkers]]
  - [[#tools][Tools]]
  - [[#os][OS]]
  - [[#languages][Languages]]
  - [[#email-apps-and-config][Email, Apps and Config]]
- [[#config][Config]]
  - [[#analisis][Analisis]]
  - [[#garbage-collection][Garbage collection]]
  - [[#backup][Backup]]
  - [[#main-variables][Main Variables]]
  - [[#emacs-configuration][Emacs Configuration]]
  - [[#splash-screen-config][Splash Screen config]]
  - [[#key-bindings][Key Bindings]]
  - [[#main-packages][Main Packages]]
  - [[#coding][Coding]]
  - [[#org-mode][Org-mode]]
  - [[#evil-mode][Evil mode]]
  - [[#custom-functions][Custom Functions]]
  - [[#better-execution][Better execution]]
- [[#packages][Packages]]
- [[#templates][Templates]]
  - [[#notes-on-bibliographic-references][Notes on bibliographic references]]

* Init
This file describes all the packages that I want preinstalled by doom.
** Completion
#+begin_src elisp :tangle "init.el"
(doom! :input
       ;;chinese
       ;;japanese
       ;;layout            ; auie,ctsrnm is the superior home row

       :completion
       (company +childframe)          ; the ultimate code completion backend
       ;;helm              ; the *other* search engine for love and life
       ;;ido               ; the other *other* search engine...
       (ivy +icons +precient)              ; a search engine for love and life
       (vertico +icons)           ; the search engine of the future
#+end_src
** UI
#+begin_src elisp :tangle "init.el"
       :ui
       ;;deft              ; notational velocity for Emacs
       doom              ; what makes DOOM look the way it does
       doom-dashboard    ; a nifty splash screen for Emacs
       ;;doom-quit         ; DOOM quit-message prompts when you quit Emacs
       (emoji +unicode)  ; ðŸ™‚
       hl-todo           ; highlight TODO/FIXME/NOTE/DEPRECATED/HACK/REVIEW
       hydra
       indent-guides     ; highlighted indent columns
       ;;ligatures         ; ligatures and symbols to make your code pretty again
       ;;minimap           ; show a map of the code on the side
       modeline           ; snazzy, Atom-inspired modeline, plus API
       nav-flash         ; blink cursor line after big motions
       ;;neotree           ; a project drawer, like NERDTree for vim
       ophints           ; highlight the region an operation acts on
        (popup
         +all
         +defaults)   ; tame sudden yet inevitable temporary windows
       ;;tabs              ; a tab bar for Emacs
       ;;treemacs          ; a project drawer, like neotree but cooler
       ;;unicode           ; extended unicode support for various languages
       vc-gutter         ; vcs diff in the fringe
       vi-tilde-fringe   ; fringe tildes to mark beyond EOB
       ;;window-select     ; visually switch windows
       workspaces        ; tab emulation, persistence & separate workspaces
       zen               ; distraction-free coding or writing
#+end_src
** Editor
#+begin_src elisp :tangle "init.el"
       :editor
       (evil +everywhere); come to the dark side, we have cookies
       file-templates    ; auto-snippets for empty files
       fold              ; (nigh) universal code folding
       (format +onsave)  ; automated prettiness
       ;;god               ; run Emacs commands without modifier keys
       ;;lispy             ; vim for lisp, for people who don't like vim
       multiple-cursors  ; editing in many places at once
       ;;objed             ; text object editing for the innocent
       ;;parinfer          ; turn lisp into python, sort of
       ;;rotate-text       ; cycle region at point between text candidates
       snippets          ; my elves. They type so I don't have to
       ;;word-wrap         ; soft wrapping with language-aware indent
#+end_src
** Emacs
#+begin_src elisp :tangle "init.el"
       :emacs
       (dired +icons)             ; making dired pretty [functional]
       electric          ; smarter, keyword-based electric-indent
       ;;ibuffer         ; interactive buffer management
       undo              ; persistent, smarter undo for your inevitable mistakes
       vc                ; version-control and Emacs, sitting in a tree
#+end_src
** Term
#+begin_src elisp :tangle "init.el"
       :term
       ;;eshell            ; the elisp shell that works everywhere
       ;;shell             ; simple shell REPL for Emacs
       ;;term              ; basic terminal emulator for Emacs
       vterm             ; the best terminal emulation in Emacs
#+end_src
** Checkers
#+begin_src elisp :tangle "init.el"
       :checkers
       syntax              ; tasing you for every semicolon you forget
       (spell +flyspell) ; tasing you for misspelling mispelling
       grammar           ; tasing grammar mistake every you make
#+end_src
** Tools
#+begin_src elisp :tangle "init.el"
       :tools
       ;;ansible
       (debugger +lsp)          ; FIXME stepping through code, to help you add bugs
       ;;direnv
       ;;docker
       ;;editorconfig      ; let someone else argue about tabs vs spaces
       ;;ein               ; tame Jupyter notebooks with emacs
       (eval +overlay)     ; run code, run (also, repls)
       ;;gist              ; interacting with github gists
       lookup              ; navigate your code and its documentation
       (lsp +peek)               ; M-x vscode
       (magit)             ; a git porcelain for Emacs
       ;;make              ; run make tasks from Emacs
       ;;pass              ; password manager for nerds
       pdf               ; pdf enhancements
       ;;prodigy           ; FIXME managing external services & code builders
       rgb               ; creating color strings
       ;;taskrunner        ; taskrunner for all your projects
       ;;terraform         ; infrastructure as code
       ;;tmux              ; an API for interacting with tmux
       upload            ; map local to remote projects via ssh/ftp
#+end_src
** OS
#+begin_src elisp :tangle "init.el"
       :os
       (:if IS-MAC macos)  ; improve compatibility with macOS
       tty               ; improve the terminal Emacs experience
#+end_src
** Languages
#+begin_src elisp :tangle "init.el"
       :lang
       (cc +lsp)                ; C > C++ == 1
       (emacs-lisp
        +lsp)       ; drown in parentheses
       (go +lsp)         ; the hipster dialect
       json              ; At least it ain't XML
       (javascript +lsp)        ; all(hope(abandon(ye(who(enter(here))))))
       (latex +dvipng)             ; writing papers in Emacs has never been so fun
       lua               ; one-based indices? one-based indices
       markdown          ; writing docs for people to ignore
       (org              ; organize your plain life in plain text
        +attach          ; custom attachment system
        +babel           ; running code in org
        +roam2
        +hugo
        +journal
        +pandoc
        +pretty
        +capture         ; org-capture in and outside of Emacs
        +export          ; Exporting org to whatever you want
        +present)
       (java +lsp +meghanda)
       php               ; perl's insecure younger brother
       (python
        +conda
        +lsp
        +pyright
        +pyenv
        +poetry)
       (rust
        +lsp)              ; Fe2O3.unwrap().unwrap().unwrap().unwrap()
       (sh +lsp +fish)                ; she sells {ba,z,fi}sh shells on the C xor
       web               ; the tubes
       yaml              ; JSON, but readable
#+end_src
*** Disabled
#+begin_src elisp :tangle "init.el"
       ;;zig               ; C, but simpler
       ;;agda              ; types of types of types of types...
       ;;beancount         ; mind the GAAP
       ;;clojure           ; java with a lisp
       ;;common-lisp       ; if you've seen one lisp, you've seen them all
       ;;coq               ; proofs-as-programs
       ;;crystal           ; ruby at the speed of c
       ;;csharp            ; unity, .NET, and mono shenanigans
       ;;data              ; config/data formats
       ;;(dart +flutter)   ; paint ui and not much else
       ;;dhall
       ;;elixir            ; erlang done right
       ;;elm               ; care for a cup of TEA?
       ;;erlang            ; an elegant language for a more civilized age
       ;;ess               ; emacs speaks statistics
       ;;factor
       ;;faust             ; dsp, but you get to keep your soul
       ;;fsharp            ; ML stands for Microsoft's Language
       ;;fstar             ; (dependent) types and (monadic) effects and Z3
       ;;gdscript          ; the language you waited for
       ;;(java +meghanada) ; the poster child for carpal tunnel syndrome
       ;;julia             ; a better, faster MATLAB
       ;;kotlin            ; a better, slicker Java(Script)
       ;;lean              ; for folks with too much to prove
       ;;ledger            ; be audit you can be
       ;;sml
       ;;nim               ; python + lisp at the speed of c
       ;;nix               ; I hereby declare "nix geht mehr!"
       ;;ocaml             ; an objective camel
       ;;plantuml          ; diagrams for confusing people more
       ;;purescript        ; javascript, but functional
       ;;solidity          ; do you need a blockchain? No.
       ;;scala             ; java, but good
       ;;(scheme +guile)   ; a fully conniving family of lisps
       ;;swift             ; who asked for emoji variables?
       ;;terra             ; Earth and Moon in alignment for performance.
       ;;qt                ; the 'cutest' gui framework ever
       ;;racket            ; a DSL for DSLs
       ;;raku              ; the artist formerly known as perl6
       ;;rest              ; Emacs as a REST client
       ;;rst               ; ReST in peace
       ;;(ruby +rails)     ; 1.step {|i| p "Ruby is #{i.even? ? 'love' : 'life'}"}
#+end_src
** Email, Apps and Config
#+begin_src elisp :tangle "init.el"
       :email
       (mu4e +org +gmail)
       ;;notmuch
       ;;(wanderlust +gmail)

       :app
       ;;calendar
       ;;emms
       ;;everywhere        ; *leave* Emacs!? You must be joking
       ;;irc               ; how neckbeards socialize
       ;;(rss +org)        ; emacs as an RSS reader
       ;;twitter           ; twitter client https://twitter.com/vnought

       :config
       ;;literate
       (default +bindings +smartparens))
#+end_src

* Config
This is the meat of the config. Where most of the actual configuration happens.
** Analisis
Some variables to see what is making emacs slow.
#+begin_src elisp :tangle "config.el"
(setq use-package-compute-statistics nil)
(setq nand2tetris-core-base-dir "~/Downloads/")
#+end_src
** Garbage collection
#+begin_src elisp :tangle "config.el"
(server-start)
;; (setq gc-cons-threshold (100000000))
;; (setq gc-cons-percentage 0.5)
;; (run-with-idle-timer 5 t #'garbage-collect)
#+end_src
** Backup
#+begin_src elisp :tangle "config.el"
(setq backup-by-copying t ; don't clobber symlinks
      backup-directory-alist '(("." . "~/.saves")) ; don't litter my fs tree
      delete-old-versions t
      kept-new-versions 6
      kept-old-versions 2
      version-control t)
#+end_src
** Main Variables
Some variable's used all over the config
#+begin_src elisp :tangle "config.el"
(setq user-full-name "Italo Amaya Arlotti"
      user-mail-address "italoamaya@icloud.com")

(defvar Dropbox-dir "~/Personal/Dropbox"
  "Path the the directory of dropbox")


(setq doom-theme 'doom-gruvbox-light
      doom-font (font-spec :family "Monaco" :size 16 :height 181 :weight 'light)
      doom-variable-pitch-font (font-spec :family "Monaco" :size 18)
      doom-big-font (font-spec :family "Monaco" :size 24))

(setq +snippets-dir "~/Personal/Programing/Emacs/Snippets/")

(defconst doom-frame-transparency 100)
(set-frame-parameter (selected-frame) 'alpha doom-frame-transparency)
(add-to-list 'default-frame-alist `(alpha . ,doom-frame-transparency))
(defun dwc-smart-transparent-frame ()
  (set-frame-parameter
    (selected-frame)
    'alpha (if (frame-parameter (selected-frame) 'fullscreen)
              100
             doom-frame-transparency)))

#+end_src

#+RESULTS:
: dwc-smart-transparent-frame

** Emacs Configuration
#+begin_src elisp :tangle "config.el"
(setq display-line-numbers-type 'relative)
(setq confirm-kill-emacs nil)
(setq scroll-margin 8)
(setq tramp-default-method "ssh")
(smooth-scrolling-mode 1)
#+end_src

** Splash Screen config
#+begin_src elisp :tangle "config.el"
(defvar +fl/splashcii-query ""
  "The query to search on asciiur.com")

(defun +fl/splashcii-banner ()
  (mapc (lambda (line)
          (insert (propertize (+doom-dashboard--center +doom-dashboard--width line)
                              'face 'doom-dashboard-banner) " ")
          (insert "\n"))
        (split-string (with-output-to-string
                        (call-process "splashcii" nil standard-output nil +fl/splashcii-query))
                      "\n" t)))

(setq +doom-dashboard-ascii-banner-fn #'+fl/splashcii-banner)

(setq +fl/splashcii-query "dragon")
;; (setq fancy-splash-image (concat doom-private-dir "bonsai.png"))

(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-shortmenu)
;; (remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-loaded)
(remove-hook '+doom-dashboard-functions #'doom-dashboard-widget-footer)
(add-hook! '+doom-dashboard-mode-hook (hide-mode-line-mode 1) (hl-line-mode -1))
(setq-hook! '+doom-dashboard-mode-hook evil-normal-state-cursor (list nil))
#+end_src

** Key Bindings
*** Find Files
#+begin_src elisp :tangle "config.el"
(map! :leader "f i D" #'italo/find/downloads)
(map! :leader "f i d" #'italo/find/doters)
(map! :leader "f i h" #'italo/find/Hugo)
(map! :leader "f i r" #'italo/find/Roam)
(map! :leader "f i R" #'italo/find/Repos)
#+end_src
*** Referencing
#+begin_src elisp :tangle "config.el"
(map!
      :leader
      (:prefix-map ("L" . "Library")
       :desc "open Library" "L" (lambda () (interactive)(find-file (concat org-roam-directory "references/Library.bib")))
       :desc "Find entry" "f" #'ivy-bibtex
       :desc "Org Ref Hydra citation" "R" #'org-ref-citation-hydra/body
       :desc "Org Ref Hydra bibtex" "r" #'org-ref-bibtex-hydra/body
       :desc "New entry from DOI" "d" #'doi-add-bibtex-entry
       )
      )
#+end_src
*** Ssh Deploy
#+begin_src elisp :tangle "config.el"
(map!
 :leader
 :desc "ssh deploy hydra panel" "r p" #'ssh-deploy-hydra/body
 )
#+end_src

*** Org Noter
#+begin_src elisp :tangle "config.el"
(map!
      :leader
      :map org-noter-notes-mode-map
      :desc "open org noter" "m n" #'org-noter
      ;; use Hydra to move arround
      )
#+end_src
*** Org roam bibtex
#+begin_src elisp :tangle "config.el"
(map!
      :leader
      :desc "insert bibliographic orb note" "n r b" #'orb-insert-link
      )
#+end_src
*** Org roam
#+begin_src elisp :tangle "config.el"
;; (map!
;;       :desc "insert bibliographic orb note" "C-i" #'org-roam-node-insert
;;       )
#+end_src
*** Org Noter
#+begin_src elisp :tangle "config.el"
(map! :leader :desc "noter precise note" "n r N i" #'org-noter-insert-precise-note)
#+end_src
*** Flyspell
#+begin_src elisp :tangle "config.el"
(map! :leader
      :desc "Correct Word"
      "t s" #'flyspell-auto-correct-word)

(map! :leader
      :desc "Change Dictionary"
      "t d" #'fd-switch-dictionary)
#+end_src

*** Rust
#+begin_src elisp :tangle "config.el"
(map! :after rustic-mode
      :map rustic-mode-map
      :leader
      :desc "Cargo add create"
      "m a" #'rustic-cargo-add)
#+end_src
*** Window Management
#+begin_src elisp :tangle "config.el"
(map! :leader
      :desc "delete other windows"
      "w w" #'delete-other-windows)
#+end_src
*** Dap mode
#+begin_src elisp :tangle "config.el"
(map! :map dap-mode-map
      :leader
      :prefix ("d" . "dap")
      ;; basics
      :desc "dap next"          "n" #'dap-next
      :desc "dap step in"       "i" #'dap-step-in
      :desc "dap step out"      "o" #'dap-step-out
      :desc "dap continue"      "c" #'dap-continue
      :desc "dap hydra"         "h" #'dap-hydra
      :desc "dap debug restart" "r" #'dap-debug-restart
      :desc "dap debug"         "s" #'dap-debug

      ;; debug
      :prefix ("dd" . "Debug")
      :desc "dap debug recent"  "r" #'dap-debug-recent
      :desc "dap debug last"    "l" #'dap-debug-last

      ;; eval
      :prefix ("de" . "Eval")
      :desc "eval"                "e" #'dap-eval
      :desc "eval region"         "r" #'dap-eval-region
      :desc "eval thing at point" "s" #'dap-eval-thing-at-point
      :desc "add expression"      "a" #'dap-ui-expressions-add
      :desc "remove expression"   "d" #'dap-ui-expressions-remove

      :prefix ("db" . "Breakpoint")
      :desc "dap breakpoint toggle"      "b" #'dap-breakpoint-toggle
      :desc "dap breakpoint condition"   "c" #'dap-breakpoint-condition
      :desc "dap breakpoint hit count"   "h" #'dap-breakpoint-hit-condition
      :desc "dap breakpoint log message" "l" #'dap-breakpoint-log-message)
#+end_src
*** Lsp mode
#+begin_src elisp :tangle "config.el"
(map! :leader
      :desc "lsp ivy workspace symbols"
      "l w" #'lsp-ivy-workspace-symbol)

(map! :leader
      :desc "Show lsp ui Doc"
      "l s" #'lsp-ui-doc-show)

(map! :leader
      :desc "Hide lsp ui Doc"
      "l h" #'lsp-ui-doc-hide)

(map! :leader
      :desc "Unfocus"
      "l u" #'lsp-ui-doc-unfocus-frame)

(map! :leader
      :desc "Glance lsp ui Doc"
      "l g" #'lsp-ui-doc-glance)

(map! :leader
      :desc "Focus lsp ui Doc"
      "l f" #'lsp-ui-doc-focus-frame)
#+end_src
*** Roam and org
#+begin_src elisp :tangle "config.el"
(map! :leader
      :desc "Next org header"
      "m j" #'org-next-visible-heading)

(map! :leader
      :desc "Next org header"
      "m k" #'org-previous-visible-heading)
(map! :leader
      :desc "Toggle org latex preview"
      "m m" #'org-latex-preview)
(map! :leader
      :desc "Roam Add Tag"
      "n r t" #'org-roam-tag-add)
(map! :leader
      :desc "Paste Screenshot"
      "n r p" #'org-download-clipboard)

(map! :leader
      :desc "Roam Add Alias"
      "n r a" #'org-roam-alias-add)
(map! :leader
      :desc "Org ui Open"
      "n r u" #'org-roam-ui-open)
#+end_src
*** Misc
These are all the custom key bindings in my config.
#+begin_src elisp :tangle "config.el"
(map! :leader "-" #'+doom-dashboard/open)
;; (map! "C-[Tab]" #'+fold/toggle)
(map! :leader "RET" #'so-long-mode)
(map! :leader "j" #'next-buffer)
(map! :leader "k" #'previous-buffer)
(map! "C-s" #'swiper)


(map! :leader
      :prefix ("l" . "LSP")
      :desc "list"
      "l" #'ivy-switch-buffer)

(map! :leader
      :desc "Vterm"
      "o v"#'oterm)


(map! :leader
      :desc "Search text recursivelly"
      "s t" #'counsel-rg)

(map! :leader
      :prefix ("g h" . "GHQ")
      :desc "Ghq get"
      "g" #'italo/exec/ghqGet)

#+end_src

** Main Packages
*** Dired
#+begin_src elisp :tangle "config.el"
(use-package! dired
  :defer 2
    :config
(after! evil-collection
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file)
    )
  )
#+end_src
*** Beacon Mode
#+begin_src elisp :tangle "config.el"
(beacon-mode 1)
#+end_src
*** SSH Deploy
#+begin_src elisp :tangle "config.el"
(use-package! ssh-deploy
  :after hydra
  :init
  (setq ssh-deploy-root-local (concat org-directory "/Hugo/")
        ssh-deploy-root-remote "/ssh:root@italoamaya.me:/home/ito/Hugo/"
        ssh-deploy-debug 1
        ssh-deploy-on-explicit-save 0
        ssh-deploy-async 1)
  :config
  (ssh-deploy-hydra "C-c C-z")
  (ssh-deploy-line-mode))
#+end_src
*** FlyCheck
#+begin_src elisp :tangle "config.el"
(setq flycheck-rust-cargo-executable "/Users/italo/.cargo/bin/cargo"
      flycheck-rust-executable "/Users/italo/.cargo/bin/rustc"
      flycheck-rust-clippy-executable "/Users/italo/.cargo/bin/cargo-clippy"
      flycheck-rustic-clippy-executable "/Users/italo/.cargo/bin/cargo-clippy")
#+end_src
*** Yas snippets
#+begin_src elisp :tangle "config.el"
(yas-global-mode 1)
#+end_src
*** Olivetti
#+begin_src elisp :tangle "config.el"
(use-package! olivetti
  :after org
  :init
  (setq olivetti-body-width 140)
  :hook (org-mode . olivetti-mode)
  :config
  (display-line-numbers-mode 0))
#+end_src
*** Magit
#+begin_src elisp :tangle "config.el"
(add-hook! 'magit-mode-hook #'magit-todos-mode)
#+end_src
*** Nano theme
#+begin_src elisp :tangle "config.el"
;; (use-package! nano-theme)
#+end_src
*** Websocket
#+begin_src elisp :tangle "config.el"
(use-package! websocket
    :after org-roam)
#+end_src
*** Which-key
#+begin_src elisp :tangle "config.el"
(use-package! which-key
    :config (setq which-key-idle-delay 0.1))
#+end_src
*** Vterm
#+begin_src elisp :tangle "config.el"
(defun vterm-padding ()
  (setq left-margin 5))

(add-hook! 'vterm-mode-hook #'vterm-padding)
#+end_src
*** Pdf view
#+begin_src elisp ;;:tangle "config.el"
(add-hook! 'pdf-tools-enabled-hook #'pdf-view-midnight-minor-mode)
(setq pdf-view-midnight-colors '("#ABB2BF" . "#282C35"))
(use-package pdf-view
  :hook (pdf-tools-enabled-hook . pdf-view-midnight-minor-mode)
  :hook (pdf-tools-enabled-hook . hide-mode-line-mode)
  :config
  (setq pdf-cache-image-limit 100)
  (setq pdf-cache-prefetch-delay 1.5)
  (setq pdf-view-midnight-colors '("#ABB2BF" . "#282C35")))
#+end_src
*** Company Mode
#+begin_src elisp :tangle "config.el"
(setq company-idle-delay 0.5)
(use-package! company-box
  :init
  (setq company-box-doc-enable nil
        company-box-doc-delay 0.5
        company-box-tooltip-maximum-width 160
        company-box--top 200
        company-box--height 50
        ))
#+end_src
*** Bespoke Themes
#+begin_src elisp :tangle "config.el"
(use-package! bespoke-themes
  :config
  ;; Set evil cursor colors
  (setq bespoke-set-evil-cursors t)
  ;; Set use of italics
  (setq bespoke-set-italic-comments t
        bespoke-set-italic-keywords t)
  ;; Set variable pitch
  (setq bespoke-set-variable-pitch t)
  ;; Set initial theme variant
  (setq bespoke-set-theme 'dark)
  ;; Load theme
  )
#+end_src
*** Email
The main package here is mu4e
#+begin_src elisp :tangle "config.el"
;; we installed this with homebrew
(setq mu4e-mu-binary (executable-find "mu"))

;; this is the directory we created before:
(setq mu4e-maildir "~/.maildir")

;; this command is called to sync imap servers:
(setq mu4e-get-mail-command (concat (executable-find "mbsync") " -a"))
;; how often to call it in seconds:
(setq mu4e-update-interval 300)

;; save attachment to desktop by default
;; or another choice of yours:
(setq mu4e-attachment-dir "~/.maildir/Attachments")

;; rename files when moving - needed for mbsync:
(setq mu4e-change-filenames-when-moving t)

;; list of your email adresses:
(setq mu4e-user-mail-address-list '("italoamaya03@gmail.com"
                                    "italoamaya@icloud.com"))

;; check your ~/.maildir to see how the subdirectories are called
;; for the generic imap account:
;; e.g `ls ~/.maildir/example'
(setq   mu4e-maildir-shortcuts
        '(("/icloud/INBOX" . ?i)
          ("/icloud/Sent Messages" . ?I)
          ("/gmail/INBOX" . ?g)
          ("/gmail/[Gmail]/Sent Mail" . ?G)))

#+end_src
**** Contexts
#+begin_src elisp :tangle "config.el"
;; (setq mu4e-contexts
;;       `(,(make-mu4e-context
;;           :name "icloud"
;;           :enter-func
;;           (lambda () (mu4e-message "Enter italoamaya@icloud.com context"))
;;           :leave-func
;;           (lambda () (mu4e-message "Leave italoamaya@icloud.com context"))
;;           :match-func
;;           (lambda (msg)
;;             (when msg
;;               (mu4e-message-contact-field-matches msg
;;                                                   :to "italoamaya@icloud.com")))
;;           :vars '((user-mail-address . "italoamaya@icloud.com" )
;;                   (user-full-name . "Italo Amaya")
;;                   (mu4e-drafts-folder . "/icloud/Drafts")
;;                   (mu4e-refile-folder . "/icloud/Archive")
;;                   (mu4e-sent-folder . "/icloud/Sent Messages")
;;                   (mu4e-trash-folder . "/icloud/Deleted Messages")))

;;         ,(make-mu4e-context
;;           :name "gmail"
;;           :enter-func
;;           (lambda () (mu4e-message "Enter italoamaya03@gmail.com context"))
;;           :leave-func
;;           (lambda () (mu4e-message "Leave italoamaya03@gmail.com context"))
;;           :match-func
;;           (lambda (msg)
;;             (when msg
;;               (mu4e-message-contact-field-matches msg
;;                                                   :to "italoamaya03@gmail.com")))
;;           :vars '((user-mail-address . "italoamaya03@gmail.com")
;;                   (user-full-name . "Italo Amaya")
;;                   (mu4e-drafts-folder . "/gmail/Drafts")
;;                   (mu4e-refile-folder . "/gmail/Archive")
;;                   (mu4e-sent-folder . "/gmail/Sent")
;;                   (mu4e-trash-folder . "/gmail/Trash")))))

;; (setq mu4e-context-policy 'pick-first) ;; start with the first (default) context;
;; (setq mu4e-compose-context-policy 'ask) ;; ask for context if no context matches;
#+end_src
** Coding
*** Packages
**** Dap Mode
#+begin_src elisp :tangle "config.el"
(after! dap-mode
  (setq dap-python-debugger 'debugpy
        dap-python-executable "python3"
        python-shell-interpreter "python3")
        (require 'dap-python))
#+end_src
**** Tree sitter
#+begin_src elisp :tangle "config.el"
(use-package! tree-sitter
  :after lsp
  :config
  (require 'tree-sitter-langs)
  (global-tree-sitter-mode)
  (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
#+end_src
**** Lsp
#+begin_src elisp :tangle "config.el"
;; The buffer thats imposible to get rid of unless you make a issue on github
(after! lsp-mode
  (setq lsp-signature-render-documentation nil))
#+end_src
**** Lsp Ui
#+begin_src elisp :tangle "config.el"
(use-package! lsp-ui
  :after lsp
  :config
  (setq lsp-ui-sideline-show-hover nil
      lsp-ui-sideline-show-code-actions t
      lsp-ui-doc-show-with-cursor nil
      lsp-ui-doc-show-with-mouse t
      lsp-ui-doc-max-width 450
      lsp-ui-doc-max-height 400
      lsp-ui-imenu-auto-refresh t
      lsp-ui-doc-position "top"))
#+end_src

#+RESULTS:

*** Languagues
**** Rust
***** Variables
#+begin_src elisp :tangle "config.el"
(add-hook! rust-mode-hook #'tree-sitter-mode)
(add-hook! tree-sitter-mode-hook #'tree-sitter-hl-mode)
#+end_src
**** C
#+begin_src elisp :tangle "config.el"
(setq-hook! 'c-mode-hook +format-with-lsp nil)
#+end_src
** Org-mode
*** Base
**** Setup
#+begin_src elisp :tangle "config.el"

(after! org
   (let* ((variable-tuple
          (cond
                ((x-list-fonts "Monaco")         '(:font "Monaco"))
                ((x-list-fonts "Source Sans Pro") '(:font "Source Sans Pro"))
                ((x-list-fonts "Lucida Grande")   '(:font "Lucida Grande"))
                ((x-list-fonts "Verdana")         '(:font "Verdana"))
                ((x-family-fonts "Sans Serif")    '(:family "Sans Serif"))
                (nil (warn "Cannot find a Sans Serif Font.  Install Source Sans Pro."))))
         (base-font-color     (face-foreground 'default nil 'default))
         (headline           `(:inherit default :weight bold)))

    (custom-theme-set-faces
     'user
     `(org-level-8 ((t (,@headline ,@variable-tuple))))
     `(org-level-7 ((t (,@headline ,@variable-tuple))))
     `(org-level-6 ((t (,@headline ,@variable-tuple))))
     `(org-level-5 ((t (,@headline ,@variable-tuple))))
     `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
     `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.25))))
     `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.5))))
     `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.75))))
     `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil)))))))
#+end_src
**** Variables
#+begin_src elisp :tangle "config.el"
(setq org-directory "/Users/italo/Personal/Programing/Emacs/Org"
      org-ellipsis " â–¾ "
      org-clock-sound (concat doom-private-dir "bell.wav")
      org-agenda-files (directory-files-recursively (concat org-directory "/Agenda/") "org$")
      +org-capture-todo-file (concat org-directory "/Agenda/todo.org")
      org-startup-with-inline-images t
      org-startup-folded nil
      org-clock-clocktable-default-properties '(:maxlevel 4)
      ;; org-startup-with-latex-preview t
      org-hide-emphasis-markers t
      org-journal-date-prefix "#+TITLE: "
      org-journal-date-format "%a, %d-%m-%Y"
      org-journal-file-format "%d-%m-%Y.org"
      org-journal-time-prefix "* "
      projectile-project-search-path '("~/Dot/" "~/Downloads/School/y1/"))

#+end_src
**** Org Capture templates
#+begin_src elisp :tangle "config.el"
#+end_src
*** Packages
**** Org Roam
***** Variables
#+begin_src elisp :tangle "config.el"
(setq org-roam-directory (concat org-directory "/roam/"))
(add-to-list 'display-buffer-alist
             '("\\*org-roam\\*"
               (display-buffer-in-direction)
               (direction . right)
               (window-width . 0.33)
               (window-height . fit-window-to-buffer)))
#+end_src
***** Capture Templates
#+begin_src elisp :tangle "config.el"
(setq org-roam-capture-templates '(
                                   ("d" "default" plain "\n\n\n* Main\n%?\n\n* References\n" :target
                                    (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :%^{Select Tag|Physics|Math|AppliedMaths|CompSci|Programming}:\n")
                                    :unnarrowed t)
                                   ("u" "uni" plain "\n\n\n* Main\n%?\n\n* References\n" :target
                                    (file+head "%<%Y%m%d%H%M%S>-${slug}.org" "#+title: ${title}\n#+filetags: :University:%^{Select Tag|Physics|Math|AppliedMaths|CompSci|Programming}:%^{Select Uni Course|ComputerProcessors|DataBases|DiscreteMaths|}:\n")
                                    :unnarrowed t)
                                   ("r" "ref" plain "%?" :target
                                    (file+head "references/${citekey}.org" "#+title: ${title}\n")
                                    :unarrowed t)
                                   ("n" "ref + noter" plain "%?":target
                                    (file+head "references/${citekey}.org" "#+title: ${title}\n\n\n* ${title}\n:PROPERTIES:\n:Custom_ID: ${citekey}\n:URL: ${url}\n:AUTHOR: ${author-or-editor}\n:NOTER_DOCUMENT: ${file}\n:END:")
                                    :unarrowed t)
                                    ))
                                    ;; (file "~/.doom.d/templates/bibnote.org")
#+end_src
**** Org Roam Bibtex
#+begin_src elisp :tangle "config.el"
(setq! orb-note-actions-interface 'hydra)

(use-package! org-roam-bibtex
  :after org-roam
  :config
  (setq orb-preformat-keywords '("citekey" "title" "url" "author-or-editor" "date" "file")
        orb-roam-ref-format 'org-ref-v3
        orb-process-file-keyword t
        orb-attached-file-extensions '("pdf")))
#+end_src
**** Org ol
#+begin_src elisp :tangle "config.el"
(use-package! org-ol-tree
  :after org
  :commands org-ol-tree
  :hook (org-ol-tree-mode . visual-line-mode)
  :config
  (setq org-ol-tree-ui-window-auto-resize nil
        org-ol-tree-ui-window-max-width 0.3
        org-ol-tree-ui-window-position 'right))
(map! :map org-mode-map
      :after org
      :localleader
      :desc "Outline" "O" #'org-ol-tree)
#+end_src
**** Org preview
#+begin_src elisp :tangle "config.el"
(use-package! org-preview
  :after org
  :config
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 2.0)))

(add-hook! 'org-mode-hook #'org-preview-mode)
#+end_src
**** Org Sticky header
#+begin_src elisp :tangle "config.el"
(use-package! org-sticky-header
  :after org
  :hook (org-mode . org-sticky-header-mode))

#+end_src
**** Org Ref
#+begin_src elisp :tangle "config.el"
(use-package! org-ref
  :after org
  :init
  (setq bibtex-autokey-year-length 4
    bibtex-autokey-name-year-separator "-"
    bibtex-autokey-year-title-separator "-"
    bibtex-autokey-titleword-separator "-"
    bibtex-autokey-titlewords 2
    bibtex-autokey-titlewords-stretch 1
    bibtex-autokey-titleword-length 5
    bibtex-completion-pdf-field "file"
    bibtex-completion-pdf-symbol "âŒ˜"
    bibtex-completion-notes-symbol "âœŽ"
    )
  (setq org-latex-pdf-process (list "latexmk -f -pdf -%latex -interaction=nonstopmode -bibtex -output-directory=%o %f"))

  (setq bibtex-completion-display-formats
    '((article       . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${journal:40}")
      (inbook        . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} Chapter ${chapter:32}")
      (incollection  . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (inproceedings . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*} ${booktitle:40}")
      (t             . "${=has-pdf=:1}${=has-note=:1} ${=type=:3} ${year:4} ${author:36} ${title:*}")))

  (setq org-ref-insert-link-function 'org-ref-insert-link-hydra/body
      org-ref-insert-cite-function 'org-ref-cite-insert-ivy
      org-ref-csl-default-style (concat org-directory "/templates/harvard-university-of-leeds.csl")
      org-ref-insert-label-function 'org-ref-insert-label-link
      org-ref-insert-ref-function 'org-ref-insert-ref-link
      org-ref-cite-onclick-function (lambda (_) (org-ref-citation-hydra/body)))
  )
#+end_src
**** Bibtex
#+begin_src elisp :tangle "config.el"
(setq bibtex-completion-bibliography (concat org-roam-directory "references/Library.bib")
      bibtex-completion-library-path (concat org-roam-directory "references/sources/")
)
#+end_src
**** Org Noter
#+begin_src elisp :tangle "config.el"
(use-package! org-noter
  :after org
  :config
  (setq org-noter-notes-search-path (concat org-roam-directory "references/sources/")))
#+end_src
**** Org Auto Tangle
#+begin_src elisp :tangle "config.el"
(use-package! org-auto-tangle
  :hook (org-mode . org-auto-tangle-mode))
#+end_src
**** Ox Hugo
#+begin_src elisp :tangle "config.el"
(use-package! ox-hugo
  :init
  (setq org-hugo-base-dir (concat org-directory "/Hugo/"))
  :config
  (defun italo/Publish/Hugo ()
    (interactive)
    (setq default-directory org-roam-directory)
    (shell-command "PubHugo")
    (hugcis/publish-lines (concat org-roam-directory "list.txt"))
    (setq default-directory org-hugo-base-dir)
    (shell-command "hugo -D;hugo server"))
  )
#+end_src
**** Org Roam UI
#+begin_src elisp :tangle "config.el"
(use-package! org-roam-ui
    :after org-roam
    :config
    (setq org-roam-ui-sync-theme t
          org-roam-ui-follow t
          org-roam-ui-update-on-save t
          org-roam-ui-open-on-start t))
#+end_src
**** Org Download
#+begin_src elisp :tangle "config.el"
(use-package! org-download
    :after org
    :defer nil
    :custom
    (org-download-method 'directory)
    (org-download-image-dir "files")
    (org-download-heading-lvl nil)
    (org-download-timestamp "%Y%m%d-%H%M%S_")
    (org-download-image-org-width 300)
    (org-download-screenshot-method "/usr/local/bin/pngpaste %s")
    :config
    (require 'org-download)
    (org-download-enable))
#+end_src
**** Org Bullets
#+begin_src elisp :tangle "config.el"
(use-package! org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("â—‰" "â—‹" "â– " "â—†" "â–²" "â–¶")))
#+end_src
**** Org-ox
#+begin_src elisp :tangle "config.el"
(after! ox-latex
  (add-to-list 'org-latex-classes
               '("org-plain-latex"
               "\\documentclass{article}
           [NO-DEFAULT-PACKAGES]
           [PACKAGES]
           [EXTRA]"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
#+end_src
**** Svg Tag mode
#+begin_src elisp :tangle "config.el"
(use-package! svg-tag-mode
  :after org
  :config
  (setq svg-tag-tags
        '(
          ("\\(:[A-Z]+:\\)" . ((lambda (tag)
                                 (svg-tag-make tag :beg 1 :end -1))))
          ("\\(=[A-Z]+=\\)" . ((lambda (tag)
                                 (svg-tag-make tag :beg 1 :end -1))))
        )
  ))

#+end_src
**** Org Fancy Priorities
#+begin_src elisp :tangle "config.el"
(after! org-fancy-priorities
  (setq org-fance-priorities-list '("â– ","â– ","â– ")))
#+end_src
** Evil mode
#+begin_src elisp :tangle "config.el"
(evil-global-set-key 'motion "j" 'evil-next-visual-line)
(evil-global-set-key 'motion "k" 'evil-previous-visual-line)
(define-key evil-ex-map "W" 'save-buffer)
(define-key evil-ex-map "q" 'save-buffer)
#+end_src
** Custom Functions
*** Change Dictionary
#+begin_src elisp :tangle "config.el"
(defun fd-switch-dictionary()
      (interactive)
      (let* ((dic ispell-current-dictionary)
    	 (change (if (string= dic "spanish") "english" "spanish")))
        (ispell-change-dictionary change)
        (message "Dictionary switched from %s to %s" dic change)
        ))
#+end_src
*** Bibtex from Jstore
#+begin_src elisp :tangle "config.el"
(defun insert-bibtex-from-jstor-stable-url (link)
  (interactive "sJstor Link: ")
  (shell-command (format (concat "~/.config/Bin/practical/getJstorLink.sh " "'" "%s" "'") link)))

#+end_src

*** Ox-latex
#+begin_src elisp :tangle "config.el"
(defun insert-setup-file()
  (interactive)
  (insert (concat "#+SETUPFILE: " org-directory "/templates/org-plain-latex-export.org")))
#+end_src
*** Insert file path
#+begin_src elisp :tangle "config.el"
(defun insert-file-path ()
  "Insert file path."
  (interactive)
  (unless (featurep 'counsel) (require 'counsel))
        (ivy-read "Find file: " 'read-file-name-internal
                  :matcher #'counsel--find-file-matcher
                  :action
                  (lambda (x)
                    (insert x))))
#+end_src
*** Open term
#+begin_src elisp :tangle "config.el"
(defun oterm()
  (interactive)
  (vterm)
  (doom/window-maximize-buffer))
#+end_src
*** Find Functions
#+begin_src elisp :tangle "config.el"
(defun italo/find/Repos ()
  (interactive)
  (doom-project-find-file "/Users/italo/Personal/Programing/Repos/"))

(defun italo/find/Roam ()
  (interactive)
  (doom-project-find-file org-roam-directory))

(defun italo/find/Hugo ()
  (interactive)
  (doom-project-find-file (concat org-directory "/Hugo/")))

(defun italo/find/doters ()
  (interactive)
  (doom-project-find-file "~/Dot/"))

(defun italo/find/downloads ()
  (interactive)
  (doom-project-find-file "~/Downloads/"))
#+end_src
*** Exec Functions
#+begin_src elisp :tangle "config.el"
(defun italo/exec/ghqGet (link)
  (interactive "sRepo Link: ")
  (shell-command (format "ghq get %s" link)))

#+end_src

** Better execution
#+begin_src elisp :tangle "config.el"
(use-package! exec-path-from-shell
 :custom
 (shell-file-name "/usr/local/bin/fish" "This is necessary because some Emacs install overwrite this variable")
 (exec-path-from-shell-variables '("PATH" "MANPATH" "PKG_CONFIG_PATH") "This adds PKG_CONFIG_PATH to the list of variables to grab. I prefer to set the list explicitly so I know exactly what is getting pulled in.")
 :init
  (if (string-equal system-type "darwin")
    (exec-path-from-shell-initialize)))
#+end_src
* Packages
#+begin_src elisp :tangle "packages.el"
;; -*- no-byte-compile: t; -*-
;;; $DOOMDIR/packages.el

;; To install a package with Doom you must declare them here and run 'doom sync'
;; on the command line, then restart Emacs for the changes to take effect -- or
;; use 'M-x doom/reload'.
(package! exec-path-from-shell)
(package! org-bullets)
(package! beacon)
(package! org-ref)
(package! ivy-bibtex)
(package! spacemacs-theme)
(package! tree-sitter)
(package! tree-sitter-langs)
(package! tsc)
(package! org-ol-tree
  :recipe (:host github :repo "Townk/org-ol-tree" :branch "main"))
(package! topsy
  :recipe (:host github :repo "alphapapa/topsy.el" :branch "master"))
(package! nano-theme
  :recipe (:host github :repo "rougier/nano-theme" :branch "master"))
(package! org-auto-tangle)
(package! org-sticky-header)
(package! smooth-scrolling)
(package! olivetti)
(package! valign)
(package! poet-theme)
(package! dap-mode)
(package! rainbow-mode)
(package! modus-themes)
(package! solo-jazz-theme)
(package! srcery-theme)
(package! org-download)
(package! org-roam-ui)
(package! org-noter)
(package! org-roam-bibtex)
(package! explain-pause-mode)
(package! tron-legacy-theme)
(package! svg-tag-mode)
(package! org-preview
  :recipe (:host github :repo "karthink/org-preview" :branch "master"))
(package! bespoke-themes
  :recipe (:host github :repo "mclear-tools/bespoke-themes" :branch "main"))
(package! 0x0
  :recipe (:host gitlab :repo "willvaughn/emacs-0x0"))
#+end_src

* Templates
** Notes on bibliographic references
[[file:./templates/bibnote.org]]
